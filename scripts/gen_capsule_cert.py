#!/usr/bin/env python3
import json, sys, pathlib

"""
Reads *.json capsules (v1.1) and emits Proof/GridCert.lean containing:
- lists of capsule ids, ΔΦ_milli, passed_drat
- a K-witness theorem: at least K capsules satisfy (passed_drat ∧ ΔΦ_milli ≥ THRESH)
Usage:
  python scripts/gen_capsule_cert.py capsules/ out/lean/Proof/GridCert.lean 90  # 90 = ΔΦ threshold
"""

def load_capsules(folder: pathlib.Path):
    caps = []
    for p in sorted(folder.glob("*.json")):
        with p.open() as f:
            c = json.load(f)
        # basic sanity
        for k in ["capsule_id","ΔΦ_milli","passed_drat"]:
            if k not in c:
                raise RuntimeError(f"{p.name} missing {k}")
        caps.append(c)
    return caps

def emit_lean(caps, out_path: pathlib.Path, thresh: int):
    ids = [c["capsule_id"] for c in caps]
    dfs = [int(c["ΔΦ_milli"]) for c in caps]
    dr  = [bool(c["passed_drat"]) for c in caps]

    witness = sum(1 for i in range(len(caps)) if dr[i] and dfs[i] >= thresh)

    def lean_list_str(xs, fmt=str):
        return "[" + ", ".join(fmt(x) for x in xs) + "]"

    def lean_bool(b): return "true" if b else "false"

    out = f"""-- AUTOGENERATED by gen_capsule_cert.py
import Brain.Proof.Prelude

namespace Brain.Proof

def capsuleIds : List String := {lean_list_str(ids, fmt=lambda s: f'"{s}"')}
def deltaPhiMilli : List Nat := {lean_list_str(dfs)}
def passedDRAT : List Bool := {lean_list_str(dr, fmt=lean_bool)}

def THRESH : Nat := {thresh}
def witnessCount : Nat := (List.zip deltaPhiMilli passedDRAT).count? (fun p => p.fst ≥ THRESH ∧ p.snd)
def EXPECTED_MIN : Nat := {witness}

theorem KWitness_ok : EXPECTED_MIN ≤ witnessCount := by
  -- computed equality, witnessed by construction
  decide

end Brain.Proof
"""
    out_path.parent.mkdir(parents=True, exist_ok=True)
    out_path.write_text(out)

def main():
    if len(sys.argv) < 4:
        print("usage: gen_capsule_cert.py <capsule_dir> <out_lean> <threshold_milli>")
        sys.exit(1)
    folder = pathlib.Path(sys.argv[1])
    out    = pathlib.Path(sys.argv[2])
    thresh = int(sys.argv[3])
    caps = load_capsules(folder)
    emit_lean(caps, out, thresh)

if __name__ == "__main__":
    main()
